{"lines":["","----","","","I just want to test the markdown rendering, please write as long session with codeblocksto","","[lua/opencode/ui/output_window.lua](lua/opencode/ui/output_window.lua)","","----","","","Here's a long markdown-rich session with many fenced code blocks to help test rendering. I include the file you provided plus a variety of smaller snippets in different languages and formats.","","**File Contents**","- `lua/opencode/ui/output_window.lua:1`","","```lua","-- lua/opencode/ui/output_window.lua","local state = require('opencode.state')","local config = require('opencode.config')","","local M = {}","M.namespace = vim.api.nvim_create_namespace('opencode_output')","","function M.create_buf()","  local output_buf = vim.api.nvim_create_buf(false, true)","  vim.api.nvim_set_option_value('filetype', 'opencode_output', { buf = output_buf })","  return output_buf","end","","function M._build_output_win_config()","  return {","    relative = 'editor',","    width = config.ui.window_width or 80,","    row = 2,","    col = 2,","    style = 'minimal',","    border = 'rounded',","    zindex = 40,","  }","end","","function M.mounted(windows)","  windows = windows or state.windows","  if","    not state.windows","    or not state.windows.output_buf","    or not state.windows.output_win","    or not vim.api.nvim_win_is_valid(windows.output_win)","  then","    return false","  end","","  return true","end","","function M.setup(windows)","  vim.api.nvim_set_option_value('winhighlight', config.ui.window_highlight, { win = windows.output_win })","  vim.api.nvim_set_option_value('wrap', true, { win = windows.output_win })","  vim.api.nvim_set_option_value('number', false, { win = windows.output_win })","  vim.api.nvim_set_option_value('relativenumber', false, { win = windows.output_win })","  vim.api.nvim_set_option_value('modifiable', false, { buf = windows.output_buf })","  vim.api.nvim_set_option_value('buftype', 'nofile', { buf = windows.output_buf })","  vim.api.nvim_set_option_value('swapfile', false, { buf = windows.output_buf })","  vim.api.nvim_set_option_value('winfixbuf', true, { win = windows.output_win })","  vim.api.nvim_set_option_value('winfixheight', true, { win = windows.output_win })","  vim.api.nvim_set_option_value('winfixwidth', true, { win = windows.output_win })","  vim.api.nvim_set_option_value('signcolumn', 'yes', { scope = 'local', win = windows.output_win })","  vim.api.nvim_set_option_value('list', false, { scope = 'local', win = windows.output_win })","","  M.update_dimensions(windows)","  M.setup_keymaps(windows)","end","","function M.update_dimensions(windows)","  local total_width = vim.api.nvim_get_option_value('columns', {})","  local width = math.floor(total_width * config.ui.window_width)","","  vim.api.nvim_win_set_config(windows.output_win, { width = width })","end","","function M.get_buf_line_count()","  if not M.mounted() then","    return 0","  end","","  return vim.api.nvim_buf_line_count(state.windows.output_buf)","end","","---Set the output buffer contents","---@param lines string[] The lines to set","---@param start_line? integer The starting line to set, defaults to 0","---@param end_line? integer The last line to set, defaults to -1","function M.set_lines(lines, start_line, end_line)","  if not M.mounted() then","    return","  end","","  start_line = start_line or 0","  end_line = end_line or -1","","  local windows = state.windows","  if not windows or not windows.output_buf then","    return","  end","","  vim.api.nvim_set_option_value('modifiable', true, { buf = windows.output_buf })","  vim.api.nvim_buf_set_lines(windows.output_buf, start_line, end_line, false, lines)","  vim.api.nvim_set_option_value('modifiable', false, { buf = windows.output_buf })","end","","---Clear output buf extmarks","---@param start_line? integer Line to start clearing, defaults 0","---@param end_line? integer Line to to clear until, defaults to -1","function M.clear_extmarks(start_line, end_line)","  if not M.mounted() or not state.windows.output_buf then","    return","  end","","  start_line = start_line or 0","  end_line = end_line or -1","","  vim.api.nvim_buf_clear_namespace(state.windows.output_buf, M.namespace, start_line, end_line)","end","","---Apply extmarks to the output buffer","---@param extmarks table<number, OutputExtmark> Extmarks indexed by line","---@param line_offset? integer Line offset to apply to extmarks, defaults to 0","function M.set_extmarks(extmarks, line_offset)","  if not M.mounted() or not extmarks or type(extmarks) ~= 'table' then","    return","  end","","  line_offset = line_offset or 0","","  local output_buf = state.windows.output_buf","","  for line_idx, marks in pairs(extmarks) do","    for _, mark in ipairs(marks) do","      local actual_mark = type(mark) == 'function' and mark() or mark","      local target_line = line_offset + line_idx","      if actual_mark.end_row then","        actual_mark.end_row = actual_mark.end_row + line_offset","      end","      local start_col = actual_mark.start_col","      if actual_mark.start_col then","        actual_mark.start_col = nil","      end","      pcall(vim.api.nvim_buf_set_extmark, output_buf, M.namespace, target_line, start_col or 0, actual_mark)","    end","  end","end","","function M.focus_output(should_stop_insert)","  if should_stop_insert then","    vim.cmd('stopinsert')","  end","  vim.api.nvim_set_current_win(state.windows.output_win)","end","","function M.close()","  if M.mounted() then","    return","  end","  pcall(vim.api.nvim_win_close, state.windows.output_win, true)","  pcall(vim.api.nvim_buf_delete, state.windows.output_buf, { force = true })","end","","function M.setup_keymaps(windows)","  local keymap = require('opencode.keymap')","  keymap.setup_window_keymaps(config.keymap.output_window, windows.output_buf)","end","","function M.setup_autocmds(windows, group)","  vim.api.nvim_create_autocmd('WinEnter', {","    group = group,","    buffer = windows.output_buf,","    callback = function()","      vim.cmd('stopinsert')","      state.last_focused_opencode_window = 'output'","      require('opencode.ui.input_window').refresh_placeholder(state.windows)","    end,","  })","","  vim.api.nvim_create_autocmd('BufEnter', {","    group = group,","    buffer = windows.output_buf,","    callback = function()","      vim.cmd('stopinsert')","      state.last_focused_opencode_window = 'output'","      require('opencode.ui.input_window').refresh_placeholder(state.windows)","    end,","  })","","  state.subscribe('current_permission', function()","    require('opencode.keymap').toggle_permission_keymap(windows.output_buf)","  end)","end","","function M.clear()","  M.set_lines({})","  M.clear_extmarks()","end","","return M","```","","**Shell / Commands**","","```bash","# show project root and run tests","pwd","ls -la","./run_tests.sh","```","","**Short Lua examples**","","```lua","-- Print buffer line count if mounted","local out = require('opencode.ui.output_window')","if out.mounted() then","  print('Lines:', out.get_buf_line_count())","else","  print('Output window not mounted.')","end","```","","**JSON sample**","","```json","{","  \"name\": \"opencode.nvim\",","  \"version\": \"0.0.0\",","  \"tests\": {","    \"unit\": 128,","    \"manual\": 12","  }","}","```","","**YAML sample**","","```yaml","ui:","  window_width: 0.5","  window_highlight: \"Normal:NormalFloat\"","keymap:","  output_window:","    close: \"<Esc>\"","    focus: \"<C-o>\"","```","","**Unified Diff example**","","```diff","*** before/lua/opencode/ui/output_window.lua","@@","-  vim.api.nvim_set_option_value('winhighlight', config.ui.window_highlight, { win = windows.output_win })","+  vim.api.nvim_set_option_value('winhighlight', config.ui.window_highlight or '', { win = windows.output_win })","```","","**Python snippet**","","```python","# small helper to format lines","def format_lines(lines):","    return [line.rstrip() for line in lines if line is not None]","```","","**SQL example**","","```sql","-- List recent sessions","SELECT id, created_at, user_id","FROM sessions","WHERE created_at > now() - interval '7 days'","ORDER BY created_at DESC","LIMIT 10;","```","","**HTML fragment**","","```html","<!doctype html>","<html>","  <head><title>Render Test</title></head>","  <body>","    <pre><code class=\"language-lua\">-- sample Lua inside HTML</code></pre>","  </body>","</html>","```","","**Indented (classic) code block**","","    This is an indented code block.","    It should render as preformatted text without language highlighting.","","**Shell snippet with inline env vars**","","```bash","export OPENCODE_ENV=development","nvim --headless -u tests/minimal/init.lua -c \"lua require('plenary.test_harness').test_directory('./tests/unit', {minimal_init = './tests/minimal/init.lua'})\"","```","","**Mixed inline code examples**","- Use backticks for commands: `./run_tests.sh`","- File path with start line: `lua/opencode/ui/output_window.lua:1`","- API call: `vim.api.nvim_buf_set_lines(buf, 0, -1, false, lines)`","","**Small checklist**","- [x] Lua file included (`lua/opencode/ui/output_window.lua:1`)","- [x] Multiple fenced code blocks","- [x] Several languages: Lua, Bash, JSON, YAML, Python, SQL, HTML, Diff","","If you want more variations (many short blocks, nested lists, tables, or extremely long blocks), tell me which formats or languages to expand and I’ll produce them.",""],"actions":[],"timestamp":1761708191,"extmarks":[[1,2,0,{"ns_id":3,"virt_text_hide":false,"virt_text":[["▌󰭻 ","OpencodeMessageRoleUser"],[" "],["USER","OpencodeMessageRoleUser"],["","OpencodeHint"],[" (2025-10-24 19:32:00)","OpencodeHint"],[" [msg_a17b4dc4c001x19oFZANB8CsEB]","OpencodeHint"]],"virt_text_repeat_linebreak":false,"virt_text_win_col":-3,"priority":10,"virt_text_pos":"win_col","right_gravity":true}],[2,3,0,{"ns_id":3,"virt_text_hide":false,"virt_text":[["▌","OpencodeMessageRoleUser"]],"virt_text_repeat_linebreak":true,"virt_text_win_col":-3,"priority":4096,"virt_text_pos":"win_col","right_gravity":true}],[3,4,0,{"ns_id":3,"virt_text_hide":false,"virt_text":[["▌","OpencodeMessageRoleUser"]],"virt_text_repeat_linebreak":true,"virt_text_win_col":-3,"priority":4096,"virt_text_pos":"win_col","right_gravity":true}],[4,5,0,{"ns_id":3,"virt_text_hide":false,"virt_text":[["▌","OpencodeMessageRoleUser"]],"virt_text_repeat_linebreak":true,"virt_text_win_col":-3,"priority":4096,"virt_text_pos":"win_col","right_gravity":true}],[5,6,0,{"ns_id":3,"virt_text_hide":false,"virt_text":[["▌","OpencodeMessageRoleUser"]],"virt_text_repeat_linebreak":true,"virt_text_win_col":-3,"priority":4096,"virt_text_pos":"win_col","right_gravity":true}],[6,9,0,{"ns_id":3,"virt_text_hide":false,"virt_text":[[" ","OpencodeMessageRoleAssistant"],[" "],["BUILD","OpencodeMessageRoleAssistant"],[" gpt-5-mini","OpencodeHint"],[" (2025-10-24 19:32:01)","OpencodeHint"],[" [msg_a17b4e166001vCnLczdZXvqLL6]","OpencodeHint"]],"virt_text_repeat_linebreak":false,"virt_text_win_col":-3,"priority":10,"virt_text_pos":"win_col","right_gravity":true}]]}