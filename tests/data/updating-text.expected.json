{"extmarks":[[1,2,0,{"ns_id":3,"virt_text_pos":"win_col","right_gravity":true,"priority":10,"virt_text_hide":false,"virt_text":[["▌󰭻 ","OpencodeMessageRoleUser"],[" "],["USER","OpencodeMessageRoleUser"],["","OpencodeHint"],[" (2025-10-10 22:06:43)","OpencodeHint"],[" [msg_9d0297a630014CA5ly3Vvw8Kt5]","OpencodeHint"]],"virt_text_repeat_linebreak":false,"virt_text_win_col":-3}],[2,3,0,{"ns_id":3,"virt_text_pos":"win_col","right_gravity":true,"priority":4096,"virt_text_hide":false,"virt_text":[["▌","OpencodeMessageRoleUser"]],"virt_text_repeat_linebreak":true,"virt_text_win_col":-3}],[3,4,0,{"ns_id":3,"virt_text_pos":"win_col","right_gravity":true,"priority":4096,"virt_text_hide":false,"virt_text":[["▌","OpencodeMessageRoleUser"]],"virt_text_repeat_linebreak":true,"virt_text_win_col":-3}],[4,5,0,{"ns_id":3,"virt_text_pos":"win_col","right_gravity":true,"priority":4096,"virt_text_hide":false,"virt_text":[["▌","OpencodeMessageRoleUser"]],"virt_text_repeat_linebreak":true,"virt_text_win_col":-3}],[5,6,0,{"ns_id":3,"virt_text_pos":"win_col","right_gravity":true,"priority":4096,"virt_text_hide":false,"virt_text":[["▌","OpencodeMessageRoleUser"]],"virt_text_repeat_linebreak":true,"virt_text_win_col":-3}],[6,9,0,{"ns_id":3,"virt_text_pos":"win_col","right_gravity":true,"priority":10,"virt_text_hide":false,"virt_text":[[" ","OpencodeMessageRoleAssistant"],[" "],["PLAN","OpencodeMessageRoleAssistant"],[" claude-sonnet-4","OpencodeHint"],[" (2025-10-10 22:06:43)","OpencodeHint"],[" [msg_9d0297ab3001UGZU9fDJM4Y75w]","OpencodeHint"]],"virt_text_repeat_linebreak":false,"virt_text_win_col":-3}]],"lines":["","----","","","What would a new neovim lua plugin look like?","","[a-empty.txt](a-empty.txt)","","----","","","A new Neovim Lua plugin typically follows this structure:","","```","plugin-name/","├── lua/","│   └── plugin-name/","│       ├── init.lua          -- Main entry point","│       ├── config.lua        -- Configuration handling","│       └── utils.lua         -- Utility functions","├── plugin/","│   └── plugin-name.lua       -- Plugin registration","└── README.md","```","","**Minimal example:**","","`plugin/example.lua`:","```lua","if vim.g.loaded_example then","  return","end","vim.g.loaded_example = 1","","vim.api.nvim_create_user_command('Example', function()","  require('example').hello()","end, {})","```","","`lua/example/init.lua`:","```lua","local M = {}","","M.setup = function(opts)","  opts = opts or {}","  -- Handle configuration","end","","M.hello = function()","  print(\"Hello from my plugin!\")","end","","return M","```","","Key components:","- Use `vim.api` for Neovim API calls","- Provide a `setup()` function for configuration","- Create user commands with `nvim_create_user_command`","- Use autocommands with `nvim_create_autocmd`","- Follow Lua module patterns with `local M = {}`",""],"actions":[],"timestamp":1761708195}